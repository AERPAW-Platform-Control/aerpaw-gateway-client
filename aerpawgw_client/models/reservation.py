# coding: utf-8

"""
    Aerpaw Gateway

    This is Aerpaw gateway service to interact with Emulab  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ericafu@renci.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Reservation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'project': 'str',
        'cluster': 'str',
        'start': 'str',
        'end': 'str',
        'type': 'str',
        'nodes': 'int',
        'experiment': 'str',
        'uuid': 'str',
        'using': 'bool'
    }

    attribute_map = {
        'username': 'username',
        'project': 'project',
        'cluster': 'cluster',
        'start': 'start',
        'end': 'end',
        'type': 'type',
        'nodes': 'nodes',
        'experiment': 'experiment',
        'uuid': 'uuid',
        'using': 'using'
    }

    def __init__(self, username=None, project=None, cluster=None, start=None, end=None, type=None, nodes=None, experiment=None, uuid=None, using=None):  # noqa: E501
        """Reservation - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._project = None
        self._cluster = None
        self._start = None
        self._end = None
        self._type = None
        self._nodes = None
        self._experiment = None
        self._uuid = None
        self._using = None
        self.discriminator = None
        if username is not None:
            self.username = username
        if project is not None:
            self.project = project
        if cluster is not None:
            self.cluster = cluster
        self.start = start
        self.end = end
        self.type = type
        self.nodes = nodes
        self.experiment = experiment
        if uuid is not None:
            self.uuid = uuid
        if using is not None:
            self.using = using

    @property
    def username(self):
        """Gets the username of this Reservation.  # noqa: E501


        :return: The username of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Reservation.


        :param username: The username of this Reservation.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def project(self):
        """Gets the project of this Reservation.  # noqa: E501


        :return: The project of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Reservation.


        :param project: The project of this Reservation.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def cluster(self):
        """Gets the cluster of this Reservation.  # noqa: E501


        :return: The cluster of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this Reservation.


        :param cluster: The cluster of this Reservation.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def start(self):
        """Gets the start of this Reservation.  # noqa: E501


        :return: The start of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Reservation.


        :param start: The start of this Reservation.  # noqa: E501
        :type: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this Reservation.  # noqa: E501


        :return: The end of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Reservation.


        :param end: The end of this Reservation.  # noqa: E501
        :type: str
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def type(self):
        """Gets the type of this Reservation.  # noqa: E501


        :return: The type of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Reservation.


        :param type: The type of this Reservation.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def nodes(self):
        """Gets the nodes of this Reservation.  # noqa: E501


        :return: The nodes of this Reservation.  # noqa: E501
        :rtype: int
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Reservation.


        :param nodes: The nodes of this Reservation.  # noqa: E501
        :type: int
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def experiment(self):
        """Gets the experiment of this Reservation.  # noqa: E501


        :return: The experiment of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment):
        """Sets the experiment of this Reservation.


        :param experiment: The experiment of this Reservation.  # noqa: E501
        :type: str
        """
        if experiment is None:
            raise ValueError("Invalid value for `experiment`, must not be `None`")  # noqa: E501

        self._experiment = experiment

    @property
    def uuid(self):
        """Gets the uuid of this Reservation.  # noqa: E501


        :return: The uuid of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Reservation.


        :param uuid: The uuid of this Reservation.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def using(self):
        """Gets the using of this Reservation.  # noqa: E501


        :return: The using of this Reservation.  # noqa: E501
        :rtype: bool
        """
        return self._using

    @using.setter
    def using(self, using):
        """Sets the using of this Reservation.


        :param using: The using of this Reservation.  # noqa: E501
        :type: bool
        """

        self._using = using

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Reservation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Reservation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
