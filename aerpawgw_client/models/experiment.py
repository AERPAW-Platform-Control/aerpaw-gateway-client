# coding: utf-8

"""
    Aerpaw Gateway

    This is Aerpaw gateway service to interact with Emulab  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ericafu@renci.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Experiment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'name': 'str',
        'project': 'str',
        'profile': 'str',
        'cluster': 'str',
        'start': 'str',
        'end': 'str',
        'status': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'username': 'username',
        'name': 'name',
        'project': 'project',
        'profile': 'profile',
        'cluster': 'cluster',
        'start': 'start',
        'end': 'end',
        'status': 'status',
        'uuid': 'uuid'
    }

    def __init__(self, username=None, name=None, project=None, profile=None, cluster=None, start=None, end=None, status=None, uuid=None):  # noqa: E501
        """Experiment - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._name = None
        self._project = None
        self._profile = None
        self._cluster = None
        self._start = None
        self._end = None
        self._status = None
        self._uuid = None
        self.discriminator = None
        if username is not None:
            self.username = username
        self.name = name
        if project is not None:
            self.project = project
        self.profile = profile
        if cluster is not None:
            self.cluster = cluster
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if status is not None:
            self.status = status
        if uuid is not None:
            self.uuid = uuid

    @property
    def username(self):
        """Gets the username of this Experiment.  # noqa: E501


        :return: The username of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Experiment.


        :param username: The username of this Experiment.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def name(self):
        """Gets the name of this Experiment.  # noqa: E501


        :return: The name of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Experiment.


        :param name: The name of this Experiment.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def project(self):
        """Gets the project of this Experiment.  # noqa: E501


        :return: The project of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Experiment.


        :param project: The project of this Experiment.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def profile(self):
        """Gets the profile of this Experiment.  # noqa: E501


        :return: The profile of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Experiment.


        :param profile: The profile of this Experiment.  # noqa: E501
        :type: str
        """
        if profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")  # noqa: E501

        self._profile = profile

    @property
    def cluster(self):
        """Gets the cluster of this Experiment.  # noqa: E501


        :return: The cluster of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this Experiment.


        :param cluster: The cluster of this Experiment.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def start(self):
        """Gets the start of this Experiment.  # noqa: E501


        :return: The start of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Experiment.


        :param start: The start of this Experiment.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this Experiment.  # noqa: E501


        :return: The end of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Experiment.


        :param end: The end of this Experiment.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def status(self):
        """Gets the status of this Experiment.  # noqa: E501


        :return: The status of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Experiment.


        :param status: The status of this Experiment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def uuid(self):
        """Gets the uuid of this Experiment.  # noqa: E501


        :return: The uuid of this Experiment.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Experiment.


        :param uuid: The uuid of this Experiment.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Experiment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Experiment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
