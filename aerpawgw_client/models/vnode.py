# coding: utf-8

"""
    Aerpaw Gateway

    This is Aerpaw gateway service to interact with Emulab  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ericafu@renci.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vnode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'node': 'str',
        'type': 'str',
        'hardware_type': 'str',
        'disk_image': 'str',
        'hostname': 'str',
        'ipv4': 'str'
    }

    attribute_map = {
        'name': 'name',
        'node': 'node',
        'type': 'type',
        'hardware_type': 'hardware_type',
        'disk_image': 'disk_image',
        'hostname': 'hostname',
        'ipv4': 'ipv4'
    }

    def __init__(self, name=None, node=None, type=None, hardware_type=None, disk_image=None, hostname=None, ipv4=None):  # noqa: E501
        """Vnode - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._node = None
        self._type = None
        self._hardware_type = None
        self._disk_image = None
        self._hostname = None
        self._ipv4 = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if node is not None:
            self.node = node
        if type is not None:
            self.type = type
        if hardware_type is not None:
            self.hardware_type = hardware_type
        if disk_image is not None:
            self.disk_image = disk_image
        if hostname is not None:
            self.hostname = hostname
        if ipv4 is not None:
            self.ipv4 = ipv4

    @property
    def name(self):
        """Gets the name of this Vnode.  # noqa: E501


        :return: The name of this Vnode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Vnode.


        :param name: The name of this Vnode.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def node(self):
        """Gets the node of this Vnode.  # noqa: E501


        :return: The node of this Vnode.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this Vnode.


        :param node: The node of this Vnode.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def type(self):
        """Gets the type of this Vnode.  # noqa: E501


        :return: The type of this Vnode.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Vnode.


        :param type: The type of this Vnode.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def hardware_type(self):
        """Gets the hardware_type of this Vnode.  # noqa: E501


        :return: The hardware_type of this Vnode.  # noqa: E501
        :rtype: str
        """
        return self._hardware_type

    @hardware_type.setter
    def hardware_type(self, hardware_type):
        """Sets the hardware_type of this Vnode.


        :param hardware_type: The hardware_type of this Vnode.  # noqa: E501
        :type: str
        """

        self._hardware_type = hardware_type

    @property
    def disk_image(self):
        """Gets the disk_image of this Vnode.  # noqa: E501


        :return: The disk_image of this Vnode.  # noqa: E501
        :rtype: str
        """
        return self._disk_image

    @disk_image.setter
    def disk_image(self, disk_image):
        """Sets the disk_image of this Vnode.


        :param disk_image: The disk_image of this Vnode.  # noqa: E501
        :type: str
        """

        self._disk_image = disk_image

    @property
    def hostname(self):
        """Gets the hostname of this Vnode.  # noqa: E501


        :return: The hostname of this Vnode.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Vnode.


        :param hostname: The hostname of this Vnode.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def ipv4(self):
        """Gets the ipv4 of this Vnode.  # noqa: E501


        :return: The ipv4 of this Vnode.  # noqa: E501
        :rtype: str
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4):
        """Sets the ipv4 of this Vnode.


        :param ipv4: The ipv4 of this Vnode.  # noqa: E501
        :type: str
        """

        self._ipv4 = ipv4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vnode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vnode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
