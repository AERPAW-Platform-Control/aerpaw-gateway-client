# coding: utf-8

"""
    Aerpaw Gateway

    This is Aerpaw gateway service to interact with Emulab  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ericafu@renci.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from aerpawgw_client.api_client import ApiClient


class ReservationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_reservation(self, body, **kwargs):  # noqa: E501
        """create reservation  # noqa: E501

        Create Reservation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_reservation(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Reservation body: Reservation Object (required)
        :param bool validate: set to true if just to validate instead of actual reserve
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_reservation_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_reservation_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_reservation_with_http_info(self, body, **kwargs):  # noqa: E501
        """create reservation  # noqa: E501

        Create Reservation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_reservation_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Reservation body: Reservation Object (required)
        :param bool validate: set to true if just to validate instead of actual reserve
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'validate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_reservation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_reservation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'validate' in params:
            query_params.append(('validate', params['validate']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reservation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_reservation(self, reservation, **kwargs):  # noqa: E501
        """delete reservation  # noqa: E501

        Delete Reservation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_reservation(reservation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reservation: reservation uuid to delete (required)
        :param str username: username who request to delete
        :param str cluster: either cluster name or cluster_urn
        :param str project: The project name
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_reservation_with_http_info(reservation, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_reservation_with_http_info(reservation, **kwargs)  # noqa: E501
            return data

    def delete_reservation_with_http_info(self, reservation, **kwargs):  # noqa: E501
        """delete reservation  # noqa: E501

        Delete Reservation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_reservation_with_http_info(reservation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reservation: reservation uuid to delete (required)
        :param str username: username who request to delete
        :param str cluster: either cluster name or cluster_urn
        :param str project: The project name
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reservation', 'username', 'cluster', 'project']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_reservation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reservation' is set
        if ('reservation' not in params or
                params['reservation'] is None):
            raise ValueError("Missing the required parameter `reservation` when calling `delete_reservation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'cluster' in params:
            query_params.append(('cluster', params['cluster']))  # noqa: E501
        if 'project' in params:
            query_params.append(('project', params['project']))  # noqa: E501
        if 'reservation' in params:
            query_params.append(('reservation', params['reservation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reservation', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reservation(self, **kwargs):  # noqa: E501
        """get reservation under user  # noqa: E501

        get reservation under user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reservation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: username for the request
        :param str cluster: either cluster name or cluster_urn
        :return: list[Reservation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_reservation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_reservation_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_reservation_with_http_info(self, **kwargs):  # noqa: E501
        """get reservation under user  # noqa: E501

        get reservation under user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reservation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: username for the request
        :param str cluster: either cluster name or cluster_urn
        :return: list[Reservation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'cluster']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reservation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'cluster' in params:
            query_params.append(('cluster', params['cluster']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reservation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Reservation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
